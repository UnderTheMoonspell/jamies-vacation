{"version":3,"sources":["assets sync /^/.//.*/.jpg$","assets/amsterdam.jpg","assets/budapest.jpg","assets/madrid.jpg","components/CustomLoader/CustomLoader.tsx","components/CustomSort/CustomSort.tsx","config.tsx","services/api.service.ts","hooks/api.hook.ts","hooks/use-effect-skip-first.hook.ts","components/CustomSearch/CustomSearch.tsx","components/AirportItem/AirportItem.tsx","components/CityCard/CityCard.tsx","containers/Home/Home.tsx","hooks/city.hook.ts"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","CustomLoader","className","Loader","active","content","CustomSort","onSortFieldChange","props","Select","onChange","event","data","value","Config","destinations","name","weatherBaseUrl","kiwiBaseURL","dateFormat","endpoints","GET_WEATHER_BY_CITY","city","LOCATIONS","term","GET_TICKET_INFO","from","to","dateFrom","dateTo","Api","baseUrl","instance","_initializeResponseInterceptor","interceptors","response","use","_handleResponse","_handleError","error","Promise","reject","get","url","config","post","payload","this","axios","create","baseURL","weatherAPI","kiwiAPI","initialOptions","isLoading","result","method","headers","useAPI","APIInstance","useState","apiOptions","setApiOptions","updateState","updatedProps","callback","inputs","isFirstRun","useRef","useEffect","current","useEffectSkipFirstRun","executeApiCall","a","locations","setUrl","CustomSearch","React","memo","searchTerm","setSearchTerm","isResultContainerOpen","setResultContainerOpen","handleSearchChange","target","length","canShowResults","useMemo","findIndex","destination","getFilteredResults","filter","checkIfClickOutside","contains","document","getElementsByClassName","window","addEventListener","removeEventListener","auto-complete","type","tab-index","onFocus","data-testid","aria-hidden","searchResult","key","onClick","clickHandler","clickItem","renderedItem","AirportItem","country","toLowerCase","CityCard","Card","is_best","Label","color","ribbon","Image","src","require","wrapped","ui","Content","Header","Meta","Description","alt","weather","icon","temp","humidity","price","Home","selectedCity","setSelectedCity","cities","setCities","setIsLoading","finishedFetching","setFinishedFetching","getCityWeather","cityWeather","feels_like","main","toFixed","all","getDestinationsWeather","getPriceInfo","moment","Date","format","add","days","ticketInfo","newState","orderBy","getDestinationsPrices","prevCities","sortCities","field","direction","split","useCity","sortOptions","text","onSearchSelect","useCallback","targetCity","prevCity","renderSearchItem","noAvailableFlights","reduce","acc","getCitiesInfo","idx","onChangeSort","sortField","displayResults","placeholder","options"],"mappings":"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","file":"static/js/4.4f000017.chunk.js","sourcesContent":["var map = {\n\t\"./amsterdam.jpg\": 187,\n\t\"./budapest.jpg\": 188,\n\t\"./madrid.jpg\": 189\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 186;","module.exports = __webpack_public_path__ + \"static/media/amsterdam.5b747391.jpg\";","module.exports = __webpack_public_path__ + \"static/media/budapest.2b3e1a91.jpg\";","module.exports = __webpack_public_path__ + \"static/media/madrid.3ba5be59.jpg\";","import React from 'react';\nimport './CustomLoader.scss'\nimport {  Loader } from 'semantic-ui-react';\n\nexport const CustomLoader = () => {\n  return (\n    <div className=\"custom-loader\">\n      <Loader active content=\"Loading...\" /> \n    </div>\n  );\n};","import React, { SyntheticEvent } from 'react';\nimport './CustomSort.scss';\nimport { DropdownItemProps, DropdownProps, Select } from 'semantic-ui-react';\n\nexport type CustomSortProps = {\n  options: DropdownItemProps[];\n  name: string;\n  placeholder: string;\n  onSortFieldChange: (sortField: string) => void;\n}\n\nexport const CustomSort: React.FC<CustomSortProps> = ({onSortFieldChange, ...props}) => {\n\n  const customChange = (event: SyntheticEvent<HTMLElement, Event>, data: DropdownProps) => {\n    onSortFieldChange(data.value! as string)\n  }\n\n  return (\n    <Select\n      className=\"custom-sort\"\n      {...props}\n      onChange={customChange} />\n  )\n}\n","const OpenWeatherAPIKeyQS: string = `&appid=f0e307920b21ae38564d922c31d05753`;\n\nexport default class Config {\n  static destinations: any[] = [\n    {\n      id: 1,\n      name: 'Amsterdam',\n      code: 'AMS',\n    },\n    {\n      id: 2,\n      name: 'Madrid',\n      code: 'MAD',\n    },\n    {\n      id: 3,\n      name: 'Budapest',\n      code: 'BUD',\n    },\n  ];\n\n  static weatherBaseUrl: string = `https://api.openweathermap.org/data/2.5`;\n  static kiwiBaseURL: string = `https://api.skypicker.com`;\n\n  static dateFormat = 'DD/MM/yyyy';\n\n  static endpoints = {\n    GET_WEATHER_BY_CITY: (city: string) =>\n      `/weather?q=${city}${OpenWeatherAPIKeyQS}&units=metric`,\n    LOCATIONS: (term: string) =>\n      `/locations?term=${term}&location_types=airport&sort=name`,\n    GET_TICKET_INFO: (\n      from: string,\n      to: string,\n      dateFrom: string,\n      dateTo: string\n    ) =>\n      `/flights?flyFrom=${from}&to=${to}&date_from=${dateFrom}&date_to=${dateTo}&curr=EURmax_stopovers=0&sort=price&limit=1&partner=picky`,\n  };\n}\n","import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport Config from 'config';\n\ndeclare module 'axios' {\n  interface AxiosResponse<T = any> extends Promise<T> {}\n}\n\nclass Api {\n  protected readonly instance: AxiosInstance;\n\n  public constructor(baseUrl: string) {\n    this.instance = axios.create({\n      baseURL: baseUrl\n    });\n\n    this._initializeResponseInterceptor();\n  }\n\n  private _initializeResponseInterceptor = () => {\n    this.instance.interceptors.response.use(\n      this._handleResponse,\n      this._handleError,\n    );\n  };\n\n  private _handleResponse = ({ data }: AxiosResponse) => data;\n\n  protected _handleError = (error: any) => Promise.reject(error);\n\n  public get = (url: string, config?: AxiosRequestConfig) : Promise<AxiosResponse<any>> => {\n    return this.instance.get(url, config);\n  }\n\n  public post = (url:string, payload: object) : Promise<AxiosResponse<any>> => {\n    return this.instance.post(url, payload);\n  }\n\n}\n\nexport const weatherAPI = new Api(Config.weatherBaseUrl)\nexport const kiwiAPI = new Api(Config.kiwiBaseURL)","import { useState } from \"react\";\nimport { useEffectSkipFirstRun } from \"./use-effect-skip-first.hook\";\n\nexport type APIHook = {\n  result: any;\n  isLoading: boolean;\n  setUrl: (url: string, method: string) => {};\n  error: string;\n};\n\nconst initialOptions = {\n  isLoading: false,\n  result: [],\n  url: '',\n  method: '',\n  error: '',\n  headers: {}\n};\n\nexport const useAPI = (APIInstance: any) => {\n  const [apiOptions, setApiOptions] = useState(initialOptions);\n\n  const updateState = (updatedProps: any) =>\n    setApiOptions({ ...initialOptions, ...updatedProps });\n\n  const setUrl = (url: string, method: string, headers: any) => {\n    updateState({ url, method, headers });\n  }\n\n  useEffectSkipFirstRun(() => {\n    const executeApiCall = async () => {\n      try {\n        updateState({ isLoading: true });\n        const { locations } = await (APIInstance as any)[apiOptions.method](apiOptions.url);\n        updateState({ result: locations, isLoading: false });\n      } catch (ex) {\n        updateState({ error: ex });\n      }\n    }\n    apiOptions.url && executeApiCall()\n\n  }, [apiOptions.url, apiOptions.method]);\n\n  return {\n    isLoading: apiOptions.isLoading,\n    result: apiOptions.result,\n    setUrl,\n  } as APIHook;\n};\n","import { useEffect, useRef } from 'react';\n\nexport const useEffectSkipFirstRun = (callback: Function, inputs: Array<any>) => {\n  const isFirstRun = useRef(true);\n  useEffect (() => {\n    if (isFirstRun.current) {\n      isFirstRun.current = false;\n      return;\n    }\n    callback()\n  }, [callback, inputs]);\n}","import Config from 'config';\nimport { useAPI } from 'hooks/api.hook';\nimport React, { ReactElement, useEffect, useMemo, useState } from 'react';\nimport { kiwiAPI } from 'services/api.service';\nimport { AirportItem } from '../AirportItem/AirportItem';\n\ntype SearchRenderComponents = typeof AirportItem;\n\ntype SearchRenderComponentsProps = any;\n\ntype SearchComponentProps = {\n  renderedItem: (\n    props: SearchRenderComponentsProps\n  ) => ReactElement<SearchRenderComponents>;\n  url: (searchTerm: string) => string;\n  clickHandler: (searchResult: any) => void; //TODO type,\n};\n\n//Memoization to avoid rerenders when parent state, not related to CustomSearch, changes\nexport const CustomSearch: React.FC<SearchComponentProps> = React.memo(\n  (props) => {\n    const [searchTerm, setSearchTerm] = useState('');\n    const [isResultContainerOpen, setResultContainerOpen] = useState(false);\n    const { isLoading, result, setUrl } = useAPI(kiwiAPI);\n\n    const handleSearchChange = async (\n      event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n      setResultContainerOpen(true);\n      const searchTerm = event.target.value || '';\n      setSearchTerm(searchTerm);\n      if (searchTerm.length < 3) return;\n      setUrl(props.url(searchTerm), 'get');\n    };\n\n    // Has results to show\n    const canShowResults = useMemo(() => {\n      return (result?.length > 1 && searchTerm.length >= 3) ||\n      (result?.length === 1 &&\n        Config.destinations.findIndex(\n          (destination) => destination.name === result[0].city.name\n        ) < 0);\n    }, [result, searchTerm])\n\n    // Do not show the destinations\n    const getFilteredResults = useMemo(() => {\n      return canShowResults ? result.filter(\n        (city: any) =>\n          Config.destinations.findIndex(\n            (destination) => destination.name === city.city.name\n          ) < 0\n      ) as any[] : [];\n    }, [canShowResults, result]);\n\n    const clickItem = (searchResult: any) => {\n      props.clickHandler(searchResult);\n      setSearchTerm('');\n    };\n\n    const areResultsVisible = () => searchTerm.length && isResultContainerOpen\n\n    const onInputFocus = () => setResultContainerOpen(true)\n\n    useEffect(() => {\n      const checkIfClickOutside = (e: any) => {\n        if(e.target.contains(document.getElementsByClassName('results')[0])) {\n          setResultContainerOpen(false)\n        }\n      }\n\n      window.addEventListener('click', checkIfClickOutside)\n\n      return (() => window.removeEventListener('click', checkIfClickOutside))\n    }, [])\n\n    return (\n      <div className={`ui search ${isLoading && 'loading'}`}>\n        <div className='ui icon input'>\n          <input\n            auto-complete='off'\n            type='text'\n            tab-index='0'\n            className='prompt'\n            value={searchTerm}\n            onChange={handleSearchChange}\n            onFocus={onInputFocus}\n            data-testid='search-input'\n          />\n          <i aria-hidden='true' className='search icon'></i>\n        </div>\n        <div\n          className={`results transition ${areResultsVisible() && 'visible'}`}\n          data-testid='results-container'\n        >\n          {canShowResults ? (\n            getFilteredResults.map((searchResult: any) => (\n              <div\n                className='result'\n                key={searchResult.id}\n                onClick={(e: React.MouseEvent<HTMLInputElement>) =>\n                  clickItem(searchResult)\n                }\n              >\n                <props.renderedItem {...searchResult} />\n              </div>\n            ))\n          ) : (\n            <div className='message empty'>\n              <div className='header'>No results found.</div>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n);\n","import { Airport } from 'models/Airport';\nimport React from 'react';\nimport './AirportItem.scss'\n\nexport const AirportItem : React.FC<Airport> = (props) => {\n  return (\n    <div className=\"airport\">\n      {props.city.name}\n      <span className=\"name\">{props.name}</span>\n      <i className={`${props.city.country?.code.toLowerCase()} flag`}></i>\n    </div>\n  );\n};","import { City } from 'models/City';\nimport React from 'react';\nimport { Card, Image, Label } from 'semantic-ui-react';\nimport './CityCard.scss';\n\nexport type CityCardProps = {\n  is_best: boolean;\n  city: City;\n};\n\nexport const CityCard: React.FC<CityCardProps> = (props) => {\n  return (\n    <Card className={`city-card ${props.is_best && 'is-best'}`}>\n      {props.is_best && (\n        <Label color={'red'} ribbon>\n          Best\n        </Label>\n      )}\n      <Image\n        className='city-image'\n        src={require(`../../assets/${props.city.name.toLowerCase()}.jpg`)}\n        wrapped\n        ui={false}\n      />\n      <Card.Content>\n        <Card.Header>{props.city.name}</Card.Header>\n        <Card.Meta>\n        </Card.Meta>\n        <Card.Description>\n          <img\n            alt='weather icon'\n            src={`https://openweathermap.org/img/wn/${props.city.weather?.icon}.png`}\n            className='weather-icon'\n          ></img>\n          <div className=\"weather-info\">\n            <span data-testid=\"temperature\">Temperature: {props.city.weather?.temp} º</span>\n            <span>Humidity: {props.city.weather?.humidity} %</span>\n          </div>\n          <span className=\"price-info\" data-testid=\"price\">{props.city.price}€</span>\n        </Card.Description>\n      </Card.Content>\n    </Card>\n  );\n};\n","import { CustomLoader } from 'components/CustomLoader/CustomLoader';\nimport { CustomSort } from 'components/CustomSort/CustomSort';\nimport Config from 'config';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { DropdownItemProps } from 'semantic-ui-react';\nimport './Home.scss';\nimport { useCity } from 'hooks/city.hook';\nimport { City } from 'models/City';\nimport { CustomSearch } from 'components/CustomSearch/CustomSearch';\nimport { AirportItem } from 'components/AirportItem/AirportItem';\nimport { CityCard } from 'components/CityCard/CityCard';\nimport { Airport } from 'models/Airport';\n\nconst Home = () => {\n  const [selectedCity, setSelectedCity] = useState();\n  const { cities, isLoading, sortCities, finishedFetching } = useCity(selectedCity);\n\n  const sortOptions = [\n    {\n      text: 'Weather',\n      value: 'feels_like|desc',\n    },\n    {\n      text: 'Price',\n      value: 'price|asc',\n    },\n    {\n      text: 'Price & Weather',\n      value: 'price,feels_like|asc,desc',\n    },\n  ] as DropdownItemProps[];\n\n  const onSearchSelect = useCallback(\n    (targetCity) => setSelectedCity(prevCity => targetCity),\n    []\n  );\n\n  const renderSearchItem = useCallback(\n    (props: Airport) => <AirportItem {...props} />,\n    []\n  );\n\n  const noAvailableFlights = useMemo(\n    () => !cities.reduce((acc: number, city: City) => (acc += city.price), 0),\n    [cities]\n  );\n\n  const getCitiesInfo = useMemo(\n    () =>\n      cities.map((city: City, idx: number) => (\n        <CityCard key={city.id} city={city} is_best={!idx} />\n      )),\n    [cities]\n  );\n\n  const onChangeSort = useCallback(\n    (sortField: string) => {\n      sortCities(\n        sortField.split('|')[0],\n        sortField.split('|')[1] as 'desc' | 'asc'\n      );\n    },\n    [sortCities]\n  );\n\n  const displayResults = useMemo(() => {\n    if (finishedFetching) {\n      if (!noAvailableFlights) {\n        return (\n          <>\n            <CustomSort\n              name='city-sort'\n              placeholder='Sort By'\n              options={sortOptions}\n              onSortFieldChange={onChangeSort}\n              data-testid='city-sort'\n            />\n            <div className='results-container'>{getCitiesInfo}</div>\n          </>\n        );\n      } else {\n        return (\n          <div className='empty-results'>\n            No flights from the chosen destination\n          </div>\n        );\n      }\n    }\n  }, [\n    finishedFetching,\n    getCitiesInfo,\n    noAvailableFlights,\n    onChangeSort,\n    sortOptions,\n  ]);\n\n  return (\n    <div className='home'>\n      <h1>Going back to office planner</h1>\n      <h3>Where are you flying from ?</h3>\n      <CustomSearch\n        url={Config.endpoints.LOCATIONS}\n        renderedItem={renderSearchItem}\n        clickHandler={onSearchSelect}\n      />\n      {isLoading ? <CustomLoader /> : displayResults}\n    </div>\n  );\n};\n\nexport default Home;\n","import Config from 'config';\nimport orderBy from 'lodash.orderby';\nimport { City } from 'models/City';\nimport { Weather } from 'models/Weather';\nimport { useEffect, useState } from 'react';\nimport { kiwiAPI, weatherAPI } from 'services/api.service';\nimport moment from 'moment';\n\nexport type CityHook = {\n  cities: City[];\n  isLoading: boolean;\n  finishedFetching: boolean;\n  sortCities: (field: string, direction: string) => void;\n};\n\nexport const useCity = (selectedCity: any) => {\n  const [cities, setCities] = useState<City[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [finishedFetching, setFinishedFetching] = useState<boolean>(false);\n\n  const sortCities = (field: string, direction: string) =>\n    setCities(\n      orderBy(\n        cities,\n        field.split(','),\n        direction.split(',') as ('asc' | 'desc')[]\n      )\n    );\n\n  const getCityWeather = async (destination: City) => {\n    //TODO rework apiHook to accept consecutive updates\n    let cityWeather = await weatherAPI.get(\n      Config.endpoints.GET_WEATHER_BY_CITY(destination.name) //TODO Types for destination cities\n    );\n    setCities((cities) => [\n      ...cities,\n      {\n        ...destination,\n        feels_like: cityWeather.main.feels_like,\n        weather: {\n          icon: cityWeather.weather[0].icon,\n          humidity: cityWeather.main.humidity,\n          temp: cityWeather.main.temp.toFixed(1),\n        } as Weather,\n      } as City,\n    ]);\n  };\n\n  useEffect(() => {\n    const getDestinationsWeather = async () =>\n      await Promise.all(Config.destinations.map(getCityWeather));\n\n    getDestinationsWeather();\n  }, []);\n\n  useEffect(() => {\n    const getPriceInfo = async (destination: City) => {\n      setFinishedFetching(false);\n      const ticketInfo = await kiwiAPI.get(\n        Config.endpoints.GET_TICKET_INFO(\n          selectedCity.code,\n          destination.code,\n          moment(new Date()).format(Config.dateFormat),\n          moment(new Date()).add({ days: 1 }).format(Config.dateFormat)\n        ) //TODO add date as inputs\n      );\n      ticketInfo.data.length &&\n        setCities((cities: City[]) => {\n          //TODO this could be normalized, the property access would be much more immediate\n          const newState = cities.map((city: City) => {\n            if (city.name === destination.name) {\n              return {\n                ...city,\n                price: ticketInfo.data[0].price,\n              };\n            } else {\n              return city;\n            }\n          });\n          return orderBy(newState, 'price', 'asc');\n        });\n      setFinishedFetching(true);\n    };\n\n    const getDestinationsPrices = async () => {\n      setCities((prevCities: City[]) => prevCities.map((city: City) => ({...city, price: 0})))\n      setIsLoading(true);\n      await Promise.all(Config.destinations.map(getPriceInfo));\n      setIsLoading(false);\n    };\n\n    selectedCity?.name && getDestinationsPrices();\n  }, [selectedCity]);\n\n  return {\n    cities,\n    isLoading,\n    sortCities,\n    finishedFetching,\n  } as CityHook;\n};\n"],"sourceRoot":""}